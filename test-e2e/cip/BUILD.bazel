load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_bundle", "container_image", "container_layer")
load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")

go_library(
    name = "go_default_library",
    srcs = ["e2e.go"],
    importpath = "sigs.k8s.io/k8s-container-image-promoter/test-e2e/cip",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/dockerregistry:go_default_library",
        "//pkg/gcloud:go_default_library",
        "//pkg/stream:go_default_library",
        "@in_gopkg_yaml_v2//:go_default_library",
        "@io_k8s_klog//:go_default_library",
    ],
)

go_binary(
    name = "e2e",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

go_image(
    name = "e2e-image",
    embed = [":go_default_library"],
    importpath = "sigs.k8s.io/k8s-container-image-promoter/e2e",
    base = "@distroless-base//image",
)

# NOTE: Bazel's docker rules do not support building manifest lists (aka "fat"
# manifests); tracking issue:
# https://github.com/bazelbuild/rules_docker/issues/300
#
# Because of this, the deterministic images for fat manifests have to be
# generated and pushed outside of bazel. So the Prowjob definition has to be
# run using a bazel + docker image.
#
# Additional notes: The 'docker manifest annotate' command can set all the
# os/arch metadata [1]. So we build pure data containers (text files) with
# different names for each os/arch, and then stitch them up together after
# docker-load-ing them with docker-manifest outside of bazel (because bazel's
# rules don't support creating Docker manifests yet:
# https://github.com/bazelbuild/rules_docker/issues/300).
#
# [1] https://docs.docker.com/engine/reference/commandline/manifest_annotate/.

# FIXME: We should be using some custom Bazel rule that can just for-loop
# across the different os/arch combinations.

# foo: linux_amd64
container_layer(
    name = "golden-layer-foo-1.0-linux_amd64",
    directory = "/golden/foo/linux_amd64",
    files = ["golden/foo/1.0-linux_amd64"],
)

container_image(
    name = "golden-image-foo-1.0-linux_amd64",
    # No base image to simulate 'scratch' image.
    layers = [":golden-layer-foo-1.0-linux_amd64"],
)

# foo: linux_s390x
container_layer(
    name = "golden-layer-foo-1.0-linux_s390x",
    directory = "/golden/foo/linux_s390x",
    files = ["golden/foo/1.0-linux_s390x"],
)

container_image(
    name = "golden-image-foo-1.0-linux_s390x",
    # No base image to simulate 'scratch' image.
    layers = [":golden-layer-foo-1.0-linux_s390x"],
)

# foo: tagless image
container_layer(
    name = "golden-layer-foo-NOTAG-0",
    directory = "/golden/foo/NOTAG",
    files = ["golden/foo/NOTAG-0"],
)

container_image(
    name = "golden-image-foo-NOTAG-0",
    layers = [":golden-layer-foo-NOTAG-0"],
)

# bar
container_layer(
    name = "golden-layer-bar-1.0",
    directory = "/golden/bar/",
    files = ["golden/bar/1.0"],
)

container_image(
    name = "golden-image-bar-1.0",
    # No base image to simulate 'scratch' image.
    layers = [":golden-layer-bar-1.0"],
)

container_bundle(
    name = "golden-images-loadable",
    images = {
        "{STABLE_TEST_STAGING_IMG_REPOSITORY}/golden-foo/foo:1.0-linux_amd64": "//test-e2e/cip:golden-image-foo-1.0-linux_amd64",
        "{STABLE_TEST_STAGING_IMG_REPOSITORY}/golden-foo/foo:1.0-linux_s390x": "//test-e2e/cip:golden-image-foo-1.0-linux_s390x",
        # We are forced to tag this image by Bazel in order to push it up (the
        # container_push() rule will also reject images with an empty tag
        # argument). In the e2e binary, we have to then strip the tag manually
        # afterwards.
        "{STABLE_TEST_STAGING_IMG_REPOSITORY}/golden-foo/foo:NOTAG-0": "//test-e2e/cip:golden-image-foo-NOTAG-0",
        "{STABLE_TEST_STAGING_IMG_REPOSITORY}/golden-bar/bar:1.0": "//test-e2e/cip:golden-image-bar-1.0",
    },
)

# These images are identical to the list in "golden-images-loadable", but their
# repository name points to the testing environment used by the auditng e2e
# test. This is because, for better or worse, Docker associates images with the
# repositories where they should be pushed to.
container_bundle(
    name = "golden-images-loadable-audit",
    images = {
        "{STABLE_TEST_AUDIT_STAGING_IMG_REPOSITORY}/golden-foo/foo:1.0-linux_amd64": "//test-e2e/cip:golden-image-foo-1.0-linux_amd64",
        "{STABLE_TEST_AUDIT_STAGING_IMG_REPOSITORY}/golden-foo/foo:1.0-linux_s390x": "//test-e2e/cip:golden-image-foo-1.0-linux_s390x",
        # We are forced to tag this image by Bazel in order to push it up (the
        # container_push() rule will also reject images with an empty tag
        # argument). In the e2e binary, we have to then strip the tag manually
        # afterwards.
        "{STABLE_TEST_AUDIT_STAGING_IMG_REPOSITORY}/golden-foo/foo:NOTAG-0": "//test-e2e/cip:golden-image-foo-NOTAG-0",
        "{STABLE_TEST_AUDIT_STAGING_IMG_REPOSITORY}/golden-bar/bar:1.0": "//test-e2e/cip:golden-image-bar-1.0",
    },
)

docker_push(
    name = "push-golden",
    bundle = "golden-images-loadable",
)

docker_push(
    name = "push-golden-audit",
    bundle = "golden-images-loadable-audit",
)
